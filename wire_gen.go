// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"SynchronizeMonorevoDeliveryDates/domain/compare"
	"SynchronizeMonorevoDeliveryDates/infrastructure/jobbook"
	"SynchronizeMonorevoDeliveryDates/infrastructure/proposition"
	"SynchronizeMonorevoDeliveryDates/presentation"
	"SynchronizeMonorevoDeliveryDates/usecase/difference"
	"SynchronizeMonorevoDeliveryDates/usecase/monorevo"
	"SynchronizeMonorevoDeliveryDates/usecase/orderdb"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitializeSynchronize(log *zap.SugaredLogger) *presentation.SynchronizingDeliveryDate {
	monorevoUserConfig := proposition.NewMonorevoUserConfig()
	propositionTable := proposition.NewPropositionTable(log, monorevoUserConfig)
	propositionFetchingUseCase := monorevo.NewPropositionFetchingUseCase(log, propositionTable)
	orderDbConfig := jobbook.NewOrderDbConfig()
	repository := jobbook.NewRepository(log, orderDbConfig)
	jobBookFetchingUseCase := orderdb.NewJobBookFetchingUseCase(log, repository)
	compareDifference := compare.NewDifference()
	propositionExtractingUseCase := difference.NewExtractingPropositionUseCase(log, compareDifference)
	propositionPostingUseCase := monorevo.NewPropositionPostingUseCase(log, propositionTable)
	synchronizingDeliveryDate := presentation.NewSynchronizingDeliveryDate(log, propositionFetchingUseCase, jobBookFetchingUseCase, propositionExtractingUseCase, propositionPostingUseCase)
	return synchronizingDeliveryDate
}
