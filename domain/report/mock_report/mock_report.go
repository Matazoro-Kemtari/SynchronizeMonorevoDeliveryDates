// Code generated by MockGen. DO NOT EDIT.
// Source: .\emailer.go

// Package mock_report is a generated GoMock package.
package mock_report

import (
	report "SynchronizeMonorevoDeliveryDates/domain/report"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSender) Send(tos, ccs, bccs []report.EmailAddress, from, replyTo report.EmailAddress, subject string, editedPropositions []report.EditedProposition, prefixReport, suffixReport string, replacements map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", tos, ccs, bccs, from, replyTo, subject, editedPropositions, prefixReport, suffixReport, replacements)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockSenderMockRecorder) Send(tos, ccs, bccs, from, replyTo, subject, editedPropositions, prefixReport, suffixReport, replacements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSender)(nil).Send), tos, ccs, bccs, from, replyTo, subject, editedPropositions, prefixReport, suffixReport, replacements)
}
