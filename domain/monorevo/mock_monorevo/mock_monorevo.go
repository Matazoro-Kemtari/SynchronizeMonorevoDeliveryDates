// Code generated by MockGen. DO NOT EDIT.
// Source: .\proposition_fetchposter.go

// Package mock_monorevo is a generated GoMock package.
package mock_monorevo

import (
	monorevo "SynchronizeMonorevoDeliveryDates/domain/monorevo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMonorevoFetcher is a mock of MonorevoFetcher interface.
type MockMonorevoFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockMonorevoFetcherMockRecorder
}

// MockMonorevoFetcherMockRecorder is the mock recorder for MockMonorevoFetcher.
type MockMonorevoFetcherMockRecorder struct {
	mock *MockMonorevoFetcher
}

// NewMockMonorevoFetcher creates a new mock instance.
func NewMockMonorevoFetcher(ctrl *gomock.Controller) *MockMonorevoFetcher {
	mock := &MockMonorevoFetcher{ctrl: ctrl}
	mock.recorder = &MockMonorevoFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonorevoFetcher) EXPECT() *MockMonorevoFetcherMockRecorder {
	return m.recorder
}

// FetchAll mocks base method.
func (m *MockMonorevoFetcher) FetchAll() ([]monorevo.Proposition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll")
	ret0, _ := ret[0].([]monorevo.Proposition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll.
func (mr *MockMonorevoFetcherMockRecorder) FetchAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockMonorevoFetcher)(nil).FetchAll))
}

// MockMonorevoPoster is a mock of MonorevoPoster interface.
type MockMonorevoPoster struct {
	ctrl     *gomock.Controller
	recorder *MockMonorevoPosterMockRecorder
}

// MockMonorevoPosterMockRecorder is the mock recorder for MockMonorevoPoster.
type MockMonorevoPosterMockRecorder struct {
	mock *MockMonorevoPoster
}

// NewMockMonorevoPoster creates a new mock instance.
func NewMockMonorevoPoster(ctrl *gomock.Controller) *MockMonorevoPoster {
	mock := &MockMonorevoPoster{ctrl: ctrl}
	mock.recorder = &MockMonorevoPosterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonorevoPoster) EXPECT() *MockMonorevoPosterMockRecorder {
	return m.recorder
}

// PostRange mocks base method.
func (m *MockMonorevoPoster) PostRange(arg0 []monorevo.DifferentProposition) ([]monorevo.UpdatedProposition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRange", arg0)
	ret0, _ := ret[0].([]monorevo.UpdatedProposition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRange indicates an expected call of PostRange.
func (mr *MockMonorevoPosterMockRecorder) PostRange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRange", reflect.TypeOf((*MockMonorevoPoster)(nil).PostRange), arg0)
}
