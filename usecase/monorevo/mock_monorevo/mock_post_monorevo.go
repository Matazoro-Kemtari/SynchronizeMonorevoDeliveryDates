// Code generated by MockGen. DO NOT EDIT.
// Source: .\post_monorevo.go

// Package mock_monorevo is a generated GoMock package.
package mock_monorevo

import (
	monorevo "SynchronizeMonorevoDeliveryDates/usecase/monorevo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPoster is a mock of Poster interface.
type MockPoster struct {
	ctrl     *gomock.Controller
	recorder *MockPosterMockRecorder
}

// MockPosterMockRecorder is the mock recorder for MockPoster.
type MockPosterMockRecorder struct {
	mock *MockPoster
}

// NewMockPoster creates a new mock instance.
func NewMockPoster(ctrl *gomock.Controller) *MockPoster {
	mock := &MockPoster{ctrl: ctrl}
	mock.recorder = &MockPosterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoster) EXPECT() *MockPosterMockRecorder {
	return m.recorder
}

// PostRange mocks base method.
func (m *MockPoster) PostRange(arg0 []monorevo.PostingPropositionPram) ([]monorevo.PostedPropositionDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRange", arg0)
	ret0, _ := ret[0].([]monorevo.PostedPropositionDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRange indicates an expected call of PostRange.
func (mr *MockPosterMockRecorder) PostRange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRange", reflect.TypeOf((*MockPoster)(nil).PostRange), arg0)
}
