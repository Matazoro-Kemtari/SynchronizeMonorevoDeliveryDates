// Code generated by MockGen. DO NOT EDIT.
// Source: .\appsetting.go

// Package mock_appsetting is a generated GoMock package.
package mock_appsetting

import (
	appsetting "SynchronizeMonorevoDeliveryDates/usecase/appsetting"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSettingLoader is a mock of SettingLoader interface.
type MockSettingLoader struct {
	ctrl     *gomock.Controller
	recorder *MockSettingLoaderMockRecorder
}

// MockSettingLoaderMockRecorder is the mock recorder for MockSettingLoader.
type MockSettingLoaderMockRecorder struct {
	mock *MockSettingLoader
}

// NewMockSettingLoader creates a new mock instance.
func NewMockSettingLoader(ctrl *gomock.Controller) *MockSettingLoader {
	mock := &MockSettingLoader{ctrl: ctrl}
	mock.recorder = &MockSettingLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingLoader) EXPECT() *MockSettingLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockSettingLoader) Load(path string) (*appsetting.AppSettingDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", path)
	ret0, _ := ret[0].(*appsetting.AppSettingDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockSettingLoaderMockRecorder) Load(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockSettingLoader)(nil).Load), path)
}
